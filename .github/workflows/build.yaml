name: Build and Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            output_name: win-x64
            rust_target: x86_64-pc-windows-msvc
          - os: macos-latest
            output_name: osx-x64
            rust_target: x86_64-apple-darwin
          - os: ubuntu-latest
            output_name: linux-x64
            rust_target: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.rust_target }}
          override: true

      - name: Build Rust library
        run: |
          cd meteor/src/meteor-rust-core
          cargo build --release --target ${{ matrix.rust_target }}

      - name: Copy Rust library to .NET project
        run: |
          mkdir -p meteor/src/meteor/bin/Release/net8.0/runtimes/${{ matrix.output_name }}/native
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp meteor/src/meteor-rust-core/target/${{ matrix.rust_target }}/release/meteor_rust_core.dll meteor/src/meteor/bin/Release/net8.0/runtimes/win-x64/native/
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            cp meteor/src/meteor-rust-core/target/${{ matrix.rust_target }}/release/libmeteor_rust_core.dylib meteor/src/meteor/bin/Release/net8.0/runtimes/osx-x64/native/
          else
            cp meteor/src/meteor-rust-core/target/${{ matrix.rust_target }}/release/libmeteor_rust_core.so meteor/src/meteor/bin/Release/net8.0/runtimes/linux-x64/native/
          fi

      - name: Restore dependencies
        run: dotnet restore meteor/src/meteor.sln

      - name: Build
        run: dotnet build --configuration Release --no-restore meteor/src/meteor.sln

      - name: Publish
        run: dotnet publish meteor/src/meteor/meteor.csproj -c Release -r ${{ matrix.output_name }} --self-contained -o publish/${{ matrix.output_name }}

      - name: Copy Rust library to publish directory
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp meteor/src/meteor-rust-core/target/${{ matrix.rust_target }}/release/meteor_rust_core.dll publish/${{ matrix.output_name }}/
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            cp meteor/src/meteor-rust-core/target/${{ matrix.rust_target }}/release/libmeteor_rust_core.dylib publish/${{ matrix.output_name }}/
          else
            cp meteor/src/meteor-rust-core/target/${{ matrix.rust_target }}/release/libmeteor_rust_core.so publish/${{ matrix.output_name }}/
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.output_name }}
          path: publish/${{ matrix.output_name }}

  create-release:
    permissions:
      contents: write
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - uses: actions/download-artifact@v3

      - name: Upload Release Asset Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./win-x64/meteor.exe
          asset_name: meteor-win-x64.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./osx-x64/meteor
          asset_name: meteor-osx-x64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux-x64/meteor
          asset_name: meteor-linux-x64
          asset_content_type: application/octet-stream
