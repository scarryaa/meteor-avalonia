using System;
using Key = Avalonia.Input.Key;

namespace meteor.UI.Adapters;

public static class KeyMapper
{
    public static Core.Enums.Key ToMeteorKey(Key avaloniaKey)
    {
        return avaloniaKey switch
        {
            Key.A => (Core.Enums.Key)Key.A,
            Key.B => (Core.Enums.Key)Key.B,
            Key.C => (Core.Enums.Key)Key.C,
            Key.D => (Core.Enums.Key)Key.D,
            Key.E => (Core.Enums.Key)Key.E,
            Key.F => (Core.Enums.Key)Key.F,
            Key.G => (Core.Enums.Key)Key.G,
            Key.H => (Core.Enums.Key)Key.H,
            Key.I => (Core.Enums.Key)Key.I,
            Key.J => (Core.Enums.Key)Key.J,
            Key.K => (Core.Enums.Key)Key.K,
            Key.L => (Core.Enums.Key)Key.L,
            Key.M => (Core.Enums.Key)Key.M,
            Key.N => (Core.Enums.Key)Key.N,
            Key.O => (Core.Enums.Key)Key.O,
            Key.P => (Core.Enums.Key)Key.P,
            Key.Q => (Core.Enums.Key)Key.Q,
            Key.R => (Core.Enums.Key)Key.R,
            Key.S => (Core.Enums.Key)Key.S,
            Key.T => (Core.Enums.Key)Key.T,
            Key.U => (Core.Enums.Key)Key.U,
            Key.V => (Core.Enums.Key)Key.V,
            Key.W => (Core.Enums.Key)Key.W,
            Key.X => (Core.Enums.Key)Key.X,
            Key.Y => (Core.Enums.Key)Key.Y,
            Key.Z => (Core.Enums.Key)Key.Z,
            Key.D0 => (Core.Enums.Key)Key.D0,
            Key.D1 => (Core.Enums.Key)Key.D1,
            Key.D2 => (Core.Enums.Key)Key.D2,
            Key.D3 => (Core.Enums.Key)Key.D3,
            Key.D4 => (Core.Enums.Key)Key.D4,
            Key.D5 => (Core.Enums.Key)Key.D5,
            Key.D6 => (Core.Enums.Key)Key.D6,
            Key.D7 => (Core.Enums.Key)Key.D7,
            Key.D8 => (Core.Enums.Key)Key.D8,
            Key.D9 => (Core.Enums.Key)Key.D9,
            Key.F1 => (Core.Enums.Key)Key.F1,
            Key.F2 => (Core.Enums.Key)Key.F2,
            Key.F3 => (Core.Enums.Key)Key.F3,
            Key.F4 => (Core.Enums.Key)Key.F4,
            Key.F5 => (Core.Enums.Key)Key.F5,
            Key.F6 => (Core.Enums.Key)Key.F6,
            Key.F7 => (Core.Enums.Key)Key.F7,
            Key.F8 => (Core.Enums.Key)Key.F8,
            Key.F9 => (Core.Enums.Key)Key.F9,
            Key.F10 => (Core.Enums.Key)Key.F10,
            Key.F11 => (Core.Enums.Key)Key.F11,
            Key.F12 => (Core.Enums.Key)Key.F12,
            Key.Enter => Core.Enums.Key.Enter,
            Key.Escape => (Core.Enums.Key)Key.Escape,
            Key.Back => Core.Enums.Key.Backspace,
            Key.Tab => (Core.Enums.Key)Key.Tab,
            Key.Space => (Core.Enums.Key)Key.Space,
            Key.Up => (Core.Enums.Key)Key.Up,
            Key.Down => (Core.Enums.Key)Key.Down,
            Key.Left => (Core.Enums.Key)Key.Left,
            Key.Right => (Core.Enums.Key)Key.Right,
            Key.Insert => (Core.Enums.Key)Key.Insert,
            Key.Delete => (Core.Enums.Key)Key.Delete,
            Key.Home => (Core.Enums.Key)Key.Home,
            Key.End => (Core.Enums.Key)Key.End,
            Key.PageUp => (Core.Enums.Key)Key.PageUp,
            Key.PageDown => (Core.Enums.Key)Key.PageDown,
            Key.LeftShift => (Core.Enums.Key)Key.LeftShift,
            Key.RightShift => (Core.Enums.Key)Key.RightShift,
            Key.LeftCtrl => (Core.Enums.Key)Key.LeftCtrl,
            Key.RightCtrl => (Core.Enums.Key)Key.RightCtrl,
            Key.LeftAlt => (Core.Enums.Key)Key.LeftAlt,
            Key.RightAlt => (Core.Enums.Key)Key.RightAlt,
            Key.OemSemicolon => (Core.Enums.Key)Key.OemSemicolon,
            Key.OemPlus => (Core.Enums.Key)Key.OemPlus,
            Key.OemComma => (Core.Enums.Key)Key.OemComma,
            Key.OemMinus => (Core.Enums.Key)Key.OemMinus,
            Key.OemPeriod => (Core.Enums.Key)Key.OemPeriod,
            Key.OemTilde => (Core.Enums.Key)Key.OemTilde,
            Key.OemOpenBrackets => (Core.Enums.Key)Key.OemOpenBrackets,
            Key.OemBackslash => (Core.Enums.Key)Key.OemBackslash,
            Key.OemCloseBrackets => (Core.Enums.Key)Key.OemCloseBrackets,
            Key.OemQuotes => (Core.Enums.Key)Key.OemQuotes,
            _ => throw new ArgumentOutOfRangeException(nameof(avaloniaKey), avaloniaKey, null)
        };
    }
}